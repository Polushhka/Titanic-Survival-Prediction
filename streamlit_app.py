import streamlit as st
import pandas as pd
from streamlit_option_menu import option_menu
from pathlib import Path
from apps import home, prediction_logreg
from plotly.io import templates
templates.default = "plotly"

st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –¢–∏—Ç–∞–Ω–∏–∫–∞",
    page_icon="üö¢",
    layout="wide",
    initial_sidebar_state="expanded",
)


@st.cache_data
def preprocess_data(file_path):
    df = pd.read_csv(file_path)
    # –ú—ã –∑–∞–ø–æ–ª–Ω—è–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è ¬´–í–æ–∑—Ä–∞—Å—Ç¬ª —Å—Ä–µ–¥–Ω–∏–º –≤–æ–∑—Ä–∞—Å—Ç–æ–º –ª—é–¥–µ–π, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –∫ —Ç–æ–º—É –∂–µ –∫–ª–∞—Å—Å—É
    df["Age"] = df.groupby(["Pclass"])["Age"].transform(lambda x: x.fillna(x.mean()))
    df['Age'].fillna(df['Age'].median(), inplace=True)

    # –ó–∞–º–µ–Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ 'Embarked' –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)
    df['Fare'].fillna(df['Fare'].median(), inplace=True)
    df["Embarked"] = df["Embarked"].replace({"S": "Southampton", "C": "Cherbourg", "Q": "Queenstown"})

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ 'Cabin' –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    df = df.drop(columns=['Cabin', 'PassengerId'])

    categorical_columns = ['Sex', 'Embarked', 'Pclass', 'Survived']
    for column in categorical_columns:
        df[column] = df[column].astype('category')
    return df


class Menu:
    apps = [
        {
            "func": home.app,
            "title": "–ì–ª–∞–≤–Ω–∞—è",
            "icon": "house-fill"
        },
        {
            "func": prediction_logreg.app,
            "title": "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "icon": "person-check-fill"
        },
    ]

    def run(self):
        with st.sidebar:
            titles = [app["title"] for app in self.apps]
            icons = [app["icon"] for app in self.apps]

            selected = option_menu(
                "–ú–µ–Ω—é",
                options=titles,
                icons=icons,
                menu_icon="cast",
                default_index=0,
            )
            st.info("""
                ## –ê–Ω–∞–ª–∏–∑ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –¢–∏—Ç–∞–Ω–∏–∫–∞
                –≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –¢–∏—Ç–∞–Ω–∏–∫–∞, –≤–∫–ª—é—á–∞—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª –∏ –¥—Ä—É–≥–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.
            """)
        return selected


if __name__ == '__main__':
    current_dir = Path(__file__).parent if "__file__" in locals() else Path.cwd()

    df = preprocess_data(current_dir / 'merged_data.csv')
    menu = Menu()
    st.sidebar.image(str(current_dir / 'images' / 'logo.png'))
    selected = menu.run()
    for app in menu.apps:
        if app["title"] == selected:
            app["func"](df, current_dir)
            break
